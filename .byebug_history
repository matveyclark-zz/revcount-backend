exit
project.client
project.project_manager.user
project.project_manager
project
exit
get_current_user.project_managers.first
get_current_user.project_manager
project.project_manager
project_manager
client
project_manager
client
get_current_user
project_manager
project.user
exit
ProjectManager.all
project.project_manager
project
User.find(5)
project_manager.id
project_manager
exit
get_current_user
project.client.user
project.client
ProjectManager.all
project.project_manager
project
client.id
project_manager.id
project_manager
project_maneger
client
exit
user
client
project_manager
project.client
project.project_manager
project.users
project_manager.id
project_manager
project.project_manager
project.client
project
exit
project.project_manager
project
exit
project.save
project
exit
project.save
project
exit
project
project_manager
user
exit
project_params[:email]
user_params[:email]
user
exit
params
project_params[:email]
params[:email]
user
exit
user = User.find_by(email: params[:email])
get_current_user
params
exit
params
exit
revision
exit
revision
exit
revision_params[:email]
revision_prarms[:email]
revision_prarams[:email]
params[:email]
exit
params["email"]
params
revision_params
params[:email]
exit
revision_params
exit
params
params[:email]
exit
params
params[:email]
params[:user]
exit
user
exit
token
user
exit
user.project_managers.first.projects
user.project_managers.first
user.project_managers
user
exit
user
exit
JWT.decode(token, secret)
JWT.decode(toke, secret)
secret
token
decoded_token
get_current_user
user
exit
user.clients
user.authenticate(user_params[:password])
user
exit
params[:user][:user_type]
params[:user]
exit
params["user_type"]
params[:user_type]
params
user
exit
params
exit
client
exit
params[:client][:email]
params[:client]
params
client
exit
params.has_key?('pm')
params.has_key?('client')
params
decoded_token
exit
project_manager
exit
get_current_client
decoded_token
exit
decoded_token["user_type"]
decoded_token.second["user_type"]
decoded_token.second
decoded_token
JWT.decode(token, secret).first
JWT.decode(token, secret)
token
exit
request.headers["authorization"]
exit
request.headers["userType"]
request.headers["authorization"]
request.headers.authorization
request.headers.userType
request.headers
exit
get_current_project_manager
get_current_client
get_current_user
exit
project_manager
exit
id
exit
decoded_token.first['id']
decoded_token.first['id]
decoded_token.first.id
decoded_token.first
decoded_token
exit
ProjectManager.find(2)
decoded_token.first
decoded_token
exit
ProjectManager.last
ProjectManager
exit
token
JWT.decode(token)
JWT.decode
secret
token
decoded_token
exit
token
secret
JWT.decode(token, secret)
JSW.decode(token, secret)
secret
token
JWT
exit
dexit
exit
decoded_token
exit
secret
JWT.decode(token, secret)
token
exit
project_manager_params[:email]
project_manager_params
exit
project_manager
exit
project_manager.errors
project_manager
